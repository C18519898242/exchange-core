# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import admin_pb2 as admin__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in admin_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AdminServiceStub(object):
    """The admin service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/exchange.core2.gateway.proto.AdminService/Ping',
                request_serializer=admin__pb2.PingRequest.SerializeToString,
                response_deserializer=admin__pb2.PingResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/exchange.core2.gateway.proto.AdminService/Login',
                request_serializer=admin__pb2.LoginRequest.SerializeToString,
                response_deserializer=admin__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.StopEngine = channel.unary_unary(
                '/exchange.core2.gateway.proto.AdminService/StopEngine',
                request_serializer=admin__pb2.StopEngineRequest.SerializeToString,
                response_deserializer=admin__pb2.StopEngineResponse.FromString,
                _registered_method=True)
        self.addUser = channel.unary_unary(
                '/exchange.core2.gateway.proto.AdminService/addUser',
                request_serializer=admin__pb2.AddUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.subscribeAdminEvents = channel.unary_stream(
                '/exchange.core2.gateway.proto.AdminService/subscribeAdminEvents',
                request_serializer=admin__pb2.SubscribeAdminEventsRequest.SerializeToString,
                response_deserializer=admin__pb2.AdminEvent.FromString,
                _registered_method=True)


class AdminServiceServicer(object):
    """The admin service definition.
    """

    def Ping(self, request, context):
        """A simple RPC to check connectivity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Login RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopEngine(self, request, context):
        """Stop the trading engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addUser(self, request, context):
        """AddUser now only returns an empty confirmation message, indicating the request has been accepted.
        The actual result will be returned asynchronously through the AdminEvents stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribeAdminEvents(self, request, context):
        """Subscribe to the admin events stream
        The client calls this method after logging in to receive all relevant admin events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=admin__pb2.PingRequest.FromString,
                    response_serializer=admin__pb2.PingResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=admin__pb2.LoginRequest.FromString,
                    response_serializer=admin__pb2.LoginResponse.SerializeToString,
            ),
            'StopEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.StopEngine,
                    request_deserializer=admin__pb2.StopEngineRequest.FromString,
                    response_serializer=admin__pb2.StopEngineResponse.SerializeToString,
            ),
            'addUser': grpc.unary_unary_rpc_method_handler(
                    servicer.addUser,
                    request_deserializer=admin__pb2.AddUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'subscribeAdminEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.subscribeAdminEvents,
                    request_deserializer=admin__pb2.SubscribeAdminEventsRequest.FromString,
                    response_serializer=admin__pb2.AdminEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exchange.core2.gateway.proto.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('exchange.core2.gateway.proto.AdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """The admin service definition.
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchange.core2.gateway.proto.AdminService/Ping',
            admin__pb2.PingRequest.SerializeToString,
            admin__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchange.core2.gateway.proto.AdminService/Login',
            admin__pb2.LoginRequest.SerializeToString,
            admin__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchange.core2.gateway.proto.AdminService/StopEngine',
            admin__pb2.StopEngineRequest.SerializeToString,
            admin__pb2.StopEngineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchange.core2.gateway.proto.AdminService/addUser',
            admin__pb2.AddUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def subscribeAdminEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/exchange.core2.gateway.proto.AdminService/subscribeAdminEvents',
            admin__pb2.SubscribeAdminEventsRequest.SerializeToString,
            admin__pb2.AdminEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
